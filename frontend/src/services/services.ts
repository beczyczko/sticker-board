/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as moment from 'moment';

export class StickersService {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44323";
    }

    stickers(): Promise<StickerDto[]> {
        let url_ = this.baseUrl + "/api/Stickers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStickers(_response);
        });
    }

    protected processStickers(response: Response): Promise<StickerDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <StickerDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StickerDto[]>(<any>null);
    }

    create(command: AddStickerCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Stickers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    sticker(stickerId: string): Promise<StickerDto> {
        let url_ = this.baseUrl + "/api/Stickers/{stickerId}";
        if (stickerId === undefined || stickerId === null)
            throw new Error("The parameter 'stickerId' must be defined.");
        url_ = url_.replace("{stickerId}", encodeURIComponent("" + stickerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSticker(_response);
        });
    }

    protected processSticker(response: Response): Promise<StickerDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <StickerDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StickerDto>(<any>null);
    }

    position(stickerId: string, newPosition: PositionDto): Promise<void> {
        let url_ = this.baseUrl + "/api/Stickers/{stickerId}/Position";
        if (stickerId === undefined || stickerId === null)
            throw new Error("The parameter 'stickerId' must be defined.");
        url_ = url_.replace("{stickerId}", encodeURIComponent("" + stickerId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newPosition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPosition(_response);
        });
    }

    protected processPosition(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    text(stickerId: string, newText: string | null | undefined, correlationId: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Stickers/{stickerId}/Text?";
        if (stickerId === undefined || stickerId === null)
            throw new Error("The parameter 'stickerId' must be defined.");
        url_ = url_.replace("{stickerId}", encodeURIComponent("" + stickerId)); 
        if (newText !== undefined)
            url_ += "newText=" + encodeURIComponent("" + newText) + "&"; 
        if (correlationId === null)
            throw new Error("The parameter 'correlationId' cannot be null.");
        else if (correlationId !== undefined)
            url_ += "correlationId=" + encodeURIComponent("" + correlationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processText(_response);
        });
    }

    protected processText(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 202) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    color(stickerId: string, correlationId: string | undefined, newColor: ColorDto): Promise<void> {
        let url_ = this.baseUrl + "/api/Stickers/{stickerId}/Color?";
        if (stickerId === undefined || stickerId === null)
            throw new Error("The parameter 'stickerId' must be defined.");
        url_ = url_.replace("{stickerId}", encodeURIComponent("" + stickerId)); 
        if (correlationId === null)
            throw new Error("The parameter 'correlationId' cannot be null.");
        else if (correlationId !== undefined)
            url_ += "correlationId=" + encodeURIComponent("" + correlationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newColor);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processColor(_response);
        });
    }

    protected processColor(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 202) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    colors(): Promise<ColorDto[]> {
        let url_ = this.baseUrl + "/api/Stickers/Colors";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processColors(_response);
        });
    }

    protected processColors(response: Response): Promise<ColorDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ColorDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ColorDto[]>(<any>null);
    }
}

export interface StickerDto {
    id: string;
    text: string | undefined;
    position: PositionDto | undefined;
    color: ColorDto | undefined;
}

export interface PositionDto {
    x: number;
    y: number;
}

export interface ColorDto {
    red: number;
    green: number;
    blue: number;
}

export interface AddStickerCommand {
    id: string;
    text: string | undefined;
    positionX: number;
    positionY: number;
    color: ColorDto | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}